# -*- coding: utf-8 -*-
"""
Driver model for Landlab Model {ModelID} {ModelName}

Katy Barnhart March 2017
"""
import resource, time
start_time = time.time()
with open('usage.txt', 'a') as usage_file:
    usage_file.write(time.ctime()+'\n')

import os
import dill as pickle
   
from yaml import load

from erosion_model import {ModelUsed} as Model
from metric_calculator import MetricDifference

from landlab import imshow_grid

#DAKOTA stuff: setting input files
input_file = 'inputs.txt' #DAKOTA creates this

# load the params file to get the correct file names
with open(input_file, 'r+') as f:
    # load params file
    params = load(f)

modern_dem_name = params['modern_dem_name']
outlet_id = params['outlet_id']
modern_dem_metric_file = params['modern_dem_metric_file']
modern_dem_chi_file = params['modern_dem_chi_file']

#plan for output files
output_fields =['topographic__elevation']

with open('usage.txt', 'a') as usage_file:
    usage = resource.getrusage(resource.RUSAGE_SELF)
    usage_file.write('\n\nUsage Before Running Model: \n')
    for name, desc in [
        ('ru_utime', 'User time'),
        ('ru_stime', 'System time'),
        ('ru_maxrss', 'Max. Resident Set Size'),
        ('ru_ixrss', 'Shared Memory Size'),
        ('ru_idrss', 'Unshared Memory Size'),
        ('ru_isrss', 'Stack Size'),
        ('ru_inblock', 'Block inputs'),
        ('ru_oublock', 'Block outputs'),
        ]:
        usage_file.write('%-25s (%-10s) = %s \n'%(desc, name, getattr(usage, name)))

#run the model
# if a restart file exists, start from there, otherwise, 
# initialize from the input file. 
saved_model_object = 'saved_model.model'
if os.path.exists(saved_model_object):
    try:
        with open(saved_model_object, 'rb') as f:
            model = pickle.load(f)
    except:
        model = Model(input_file)
else:
    model = Model(input_file)

model.run(output_fields=output_fields)

# remove restart file once model run is complete. 
if os.path.exists(saved_model_object):
    os.remove(saved_model_object)

with open('usage.txt', 'a') as usage_file:
    usage = resource.getrusage(resource.RUSAGE_SELF)
    usage_file.write('\n\nUsage After Running Model: \n')
    for name, desc in [
        ('ru_utime', 'User time'),
        ('ru_stime', 'System time'),
        ('ru_maxrss', 'Max. Resident Set Size'),
        ('ru_ixrss', 'Shared Memory Size'),
        ('ru_idrss', 'Unshared Memory Size'),
        ('ru_isrss', 'Stack Size'),
        ('ru_inblock', 'Block inputs'),
        ('ru_oublock', 'Block outputs'),
        ]:
        usage_file.write('%-25s (%-10s) = %s \n'%(desc, name, getattr(usage, name)))

model_dem_name = model.params['output_filename'] + \
    str(model.iteration-1).zfill(4) + \
        '.nc'

# calculate metrics
md = MetricDifference(model_dem_name=model_dem_name,
                              modern_dem_metric_file = modern_dem_metric_file, 
                              modern_dem_chi_file = modern_dem_chi_file, 
                              outlet_id = outlet_id)
md.run()
# write out metrics
output_bundle = md.dakota_bundle()
with open('outputs_for_analysis.txt', 'a') as fp:
    for metric in output_bundle:
        fp.write(str(metric)+'\n')

cur_working = os.getcwd()
cur_working_split = cur_working.split(os.path.sep)
cur_working_split.append('png')
cut_ind = cur_working_split.index('results')+3
fig_name = '.'.join(cur_working_split[cut_ind:])

imshow_grid(model.grid, model.z, vmin=1220, vmax=1450, cmap='viridis', output=fig_name)

with open('usage.txt', 'a') as usage_file:
    usage = resource.getrusage(resource.RUSAGE_SELF)
    usage_file.write('\n\nUsage At End of Job: \n')
    for name, desc in [
        ('ru_utime', 'User time'),
        ('ru_stime', 'System time'),
        ('ru_maxrss', 'Max. Resident Set Size'),
        ('ru_ixrss', 'Shared Memory Size'),
        ('ru_idrss', 'Unshared Memory Size'),
        ('ru_isrss', 'Stack Size'),
        ('ru_inblock', 'Block inputs'),
        ('ru_oublock', 'Block outputs'),
        ]:
        usage_file.write('%-25s (%-10s) = %s \n'%(desc, name, getattr(usage, name)))
    
    end_time = time.time()
    usage_file.write('\n\n'+time.ctime()+'\n')
    usage_file.write('Elapsed Time: '+str(end_time-start_time)+'\n')