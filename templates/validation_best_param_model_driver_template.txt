# -*- coding: utf-8 -*-
"""
Driver model for Landlab Model {ModelID} {ModelName}

Katy Barnhart March 2017
"""
import subprocess
import os
import sys
import time
import glob

pngs = glob.glob('*.png')
if len(pngs) > 0:
  run_model = False
else:
  run_model = True
  
if run_model:
    # import resource calculation modules and start logging usage
    import resource

    # import remaining required modules.

    from subprocess import call
    from yaml import load
    import numpy as np

    import os
    import dill as pickle

    from erosion_model import {ModelUsed} as Model
    from metric_calculator import GroupedDifferences
    from landlab import imshow_grid

    # set files and directories used to set input templates.
    # Files and directories.
    input_file = 'inputs.txt'

    start_time = time.time()
    with open('usage.txt', 'a') as usage_file:
        usage_file.write(time.ctime()+'\n')

    # now prepare to run landlab.
    # load the params file to get the correct file names
    with open(input_file, 'r+') as f:
        # load params file
        params = load(f)

    # get filenames/etc.
    modern_dem_name = params['modern_dem_name']
    outlet_id = params['outlet_id']

    outlet_id = params['outlet_id']
    category_file = params['category_file']
    category_values = np.loadtxt(category_file)
    category_weight_file = params['category_weight_file']
    weight_values = np.loadtxt(category_weight_file)

    #plan for output files
    # write all output

    # write usage
    with open('usage.txt', 'a') as usage_file:
        usage = resource.getrusage(resource.RUSAGE_SELF)
        usage_file.write('\n\nUsage Before Running Model: \n')
        for name, desc in [
            ('ru_utime', 'User time'),
            ('ru_stime', 'System time'),
            ('ru_maxrss', 'Max. Resident Set Size'),
            ('ru_ixrss', 'Shared Memory Size'),
            ('ru_idrss', 'Unshared Memory Size'),
            ('ru_isrss', 'Stack Size'),
            ('ru_inblock', 'Block inputs'),
            ('ru_oublock', 'Block outputs'),
            ]:
            usage_file.write('%-25s (%-10s) = %s \n'%(desc, name, getattr(usage, name)))

    #run the model
    model = Model(input_file)
    model.run()

    with open('usage.txt', 'a') as usage_file:
        usage = resource.getrusage(resource.RUSAGE_SELF)
        usage_file.write('\n\nUsage After Running Model: \n')
        for name, desc in [
            ('ru_utime', 'User time'),
            ('ru_stime', 'System time'),
            ('ru_maxrss', 'Max. Resident Set Size'),
            ('ru_ixrss', 'Shared Memory Size'),
            ('ru_idrss', 'Unshared Memory Size'),
            ('ru_isrss', 'Stack Size'),
            ('ru_inblock', 'Block inputs'),
            ('ru_oublock', 'Block outputs'),
            ]:
            usage_file.write('%-25s (%-10s) = %s \n'%(desc, name, getattr(usage, name)))

    model_dem_name = model.params['output_filename'] + \
        str(model.iteration-1).zfill(4) + \
            '.nc'

    # calculate metrics
    gd = GroupedDifferences(model_dem_name, modern_dem_name,
                            outlet_id=outlet_id,
                            category_values=category_values,
                            weight_values=weight_values)
    gd.calculate_metrics()

    # write out metrics as "ouputs_for_analysis.txt' and as Dakota expects.
    output_bundle = gd.dakota_bundle()
    with open('outputs_for_analysis.txt', 'w') as fp:
        for metric in output_bundle:
            fp.write(str(metric)+'\n')

    cur_working = os.getcwd()
    cur_working_split = cur_working.split(os.path.sep)
    cur_working_split.append('png')
    try:
        cut_ind = cur_working_split.index('results')+3
    except:
        cut_ind = cur_working_split.index('study3py')+3

    fig_name = '.'.join(cur_working_split[cut_ind:])

    imshow_grid(model.grid, model.z, vmin=1161, vmax=1802, cmap='viridis', output=fig_name)

    with open('usage.txt', 'a') as usage_file:
        usage = resource.getrusage(resource.RUSAGE_SELF)
        usage_file.write('\n\nUsage At End of Job: \n')
        for name, desc in [
            ('ru_utime', 'User time'),
            ('ru_stime', 'System time'),
            ('ru_maxrss', 'Max. Resident Set Size'),
            ('ru_ixrss', 'Shared Memory Size'),
            ('ru_idrss', 'Unshared Memory Size'),
            ('ru_isrss', 'Stack Size'),
            ('ru_inblock', 'Block inputs'),
            ('ru_oublock', 'Block outputs'),
            ]:
            usage_file.write('%-25s (%-10s) = %s \n'%(desc, name, getattr(usage, name)))

        end_time = time.time()
        usage_file.write('\n\n'+time.ctime()+'\n')
        usage_file.write('Elapsed Time: '+str(end_time-start_time)+'\n')
